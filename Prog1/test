#include<stdio.h>
#include<stdlib.h>
//#include"myowncode.h"

int main(int argc, char **argv)
{
	fprintf(stdout, "Hello World\n");
	printf("Hello World\n");
	fprintf(stderr, "Uncaught line\n");

	fprintf(stdout, "%s\n", argv[20]);

	for(int i=0; i<argc; i++)
	{
		fprintf(stdout, "Args %d: %s\n", i, argv[i]);
		fprintf(stdout, "Args %d: %s\n", i, *(argv + i));
	}

	int number = 5;
//	double dnumber = 10.3;
//	float fnumber = 4.5;
	char word[10];
	int other = 10;

	word[0] = 'b';
	word[1] = 'i';
	//word[2] = 'r';
	*(word + 2) = 'r';
	word[3] = 'd';
	word[4] = '\0';
	word[4] = (char)0;


	char *wordPtr, letter;
	//Type of wordPtr is (char *)
	//Type of letter is (char)
	letter = 't';
	wordPtr = &letter;

	fprintf(stderr, "word lives at location: '%p'\n", &word);
	fprintf(stderr, "Other lives at location: '%p'\n", &other);
	fprintf(stderr, "Number lives at location: '%p'\n", &number);
	fprintf(stderr, "word lives at location: '%p'\n", word);
	fprintf(stderr, "The word is '%s'\n", word);
/*	fprintf(stderr, "The word is '%c'\n", word);
	fprintf(stderr, "The word is '%c'\n", word[0]);
	fprintf(stderr, "The word is '%c'\n", word[1]);
	fprintf(stderr, "The word is '%c'\n", word[2]);
	fprintf(stderr, "The word(ptr) is '%c'\n", *(word + 0));
	fprintf(stderr, "The word(ptr) is '%c'\n", *(word + 1));
	fprintf(stderr, "The word(ptr) is '%c'\n", *(word + 2));
*/
	char temp = word[1];
	wordPtr = (char *)&word;
	temp = wordPtr[1];
	temp = *(wordPtr + 1);
	*(wordPtr + 1) = wordPtr[3];
	wordPtr[3] = temp;
/*
	fprintf(stderr, "The word is '%s'\n", word);

	fprintf(stdout, "Enter a number: ");
	fscanf(stdin, "%d", &number);
	fprintf(stdout, "The user inputted %d\n", number);
	fprintf(stdout, "Our values are %d %d\n", number, other);

	fprintf(stdout, "Enter a word: ");
	fscanf(stdin, "%9s", wordPtr);
	fprintf(stdout, "User entered: '%9s'\n", wordPtr);
	fprintf(stdout, "User entered: '%s'\n", wordPtr);
	fprintf(stderr, "The word is '%s'\n", wordPtr);
	fprintf(stdout, "Our values are %d %d\n", number, other);

*/
	//TYPE *storage = (TYPE *)malloc(DESIRED_SIZE * sizeof(TYPE));
	//char **sample = (char **)malloc(80 * sizeof(char *));
	int size = 80;
	char *buffer = (char *)malloc(size * sizeof(char));
	fprintf(stdout, "Input up to %d letters: ", size);

	for(int i=0; i<size; i++)
	{
		buffer[i] = 'q';
	}

	fscanf(stdin, "%79s", buffer);

	for(int i=0; i<size; i++)
	{
		fprintf(stdout, "%2d: %c (%d)\n", i, buffer[i], (int)buffer[i]);
	}

	//man getline
	//man getc/fgetc

	free(buffer);
	//char *buffer = NULL;
	buffer = NULL;
	fprintf(stdout, "Input something else, one word, no size limit: ");
	fscanf(stdin, "%m[^\n]s", &buffer);
	fprintf(stdout, "Entered string: '%s'\n", buffer);
	free(buffer);
	buffer = NULL;


/*
	fprintf(stderr, "Letter is '%c'\n", letter);
	fprintf(stderr, "Letter lives at location: '%p'\n", &letter);
	fprintf(stderr, "We think Letter lives at location: '%p'\n", wordPtr);

	*wordPtr = 'q';

    fprintf(stderr, "Letter is '%c'\n", letter);
    fprintf(stderr, "Letter lives at location: '%p'\n", &letter);
    fprintf(stderr, "We think Letter lives at location: '%p'\n", wordPtr);
*/

	return 0;
}








>h.oidts<edulcni#
>h.bildts<edulcni#
"h.edocnwoym"edulcni#//

tni tni(niam ,cgra rahc )vgra**
{
	,tuodts(ftnirpf olleH" ;)"n\dlroW
	olleH"(ftnirp ;)"n\dlroW
	,rredts(ftnirpf thguacnU" ;)"n\enil

	,tuodts(ftnirpf ,"n\s%" ;)]02[vgra

	tni(rof ;0=i ;cgra<i )++i
	{
		,tuodts(ftnirpf sgrA" :d% ,"n\s% ,i ;)]i[vgra
		,tuodts(ftnirpf sgrA" :d% ,"n\s% ,i vgra(* + ;))i
	}

	tni rebmun = ;5
//	elbuod rebmund = ;3.01
//	taolf rebmunf = ;5.4
	rahc ;]01[drow
	tni rehto = ;01

	]0[drow = ;'b'
	]1[drow = ;'i'
	]2[drow// = ;'r'
	drow(* + )2 = ;'r'
	]3[drow = ;'d'
	]4[drow = ;'0\'
	]4[drow = ;0)rahc(


	rahc ,rtPdrow* ;rettel
	epyT// fo rtPdrow si rahc( )*
	epyT// fo rettel si )rahc(
	rettel = ;'t'
	rtPdrow = ;rettel&

	,rredts(ftnirpf drow" sevil ta :noitacol ,"n\'p%' ;)drow&
	,rredts(ftnirpf rehtO" sevil ta :noitacol ,"n\'p%' ;)rehto&
	,rredts(ftnirpf rebmuN" sevil ta :noitacol ,"n\'p%' ;)rebmun&
	,rredts(ftnirpf drow" sevil ta :noitacol ,"n\'p%' ;)drow
	,rredts(ftnirpf ehT" drow si ,"n\'s%' ;)drow
*/	,rredts(ftnirpf ehT" drow si ,"n\'c%' ;)drow
	,rredts(ftnirpf ehT" drow si ,"n\'c%' ;)]0[drow
	,rredts(ftnirpf ehT" drow si ,"n\'c%' ;)]1[drow
	,rredts(ftnirpf ehT" drow si ,"n\'c%' ;)]2[drow
	,rredts(ftnirpf ehT" )rtp(drow si ,"n\'c%' drow(* + ;))0
	,rredts(ftnirpf ehT" )rtp(drow si ,"n\'c%' drow(* + ;))1
	,rredts(ftnirpf ehT" )rtp(drow si ,"n\'c%' drow(* + ;))2
/*
	rahc pmet = ;]1[drow
	rtPdrow = rahc( ;drow&)*
	pmet = ;]1[rtPdrow
	pmet = rtPdrow(* + ;)1
	rtPdrow(* + )1 = ;]3[rtPdrow
	]3[rtPdrow = ;pmet
*/
	,rredts(ftnirpf ehT" drow si ,"n\'s%' ;)drow

	,tuodts(ftnirpf retnE" a :rebmun ;)"
	,nidts(fnacsf ,"d%" ;)rebmun&
	,tuodts(ftnirpf ehT" resu dettupni ,"n\d% ;)rebmun
	,tuodts(ftnirpf ruO" seulav era d% ,"n\d% ,rebmun ;)rehto

	,tuodts(ftnirpf retnE" a :drow ;)"
	,nidts(fnacsf ,"s9%" ;)rtPdrow
	,tuodts(ftnirpf resU" :deretne ,"n\'s9%' ;)rtPdrow
	,tuodts(ftnirpf resU" :deretne ,"n\'s%' ;)rtPdrow
	,rredts(ftnirpf ehT" drow si ,"n\'s%' ;)rtPdrow
	,tuodts(ftnirpf ruO" seulav era d% ,"n\d% ,rebmun ;)rehto

/*
	EPYT// egarots* = EPYT( EZIS_DERISED(collam)* * ;))EPYT(foezis
	rahc// elpmas** = rahc( 08(collam)** * rahc(foezis ;))*
	tni ezis = ;08
	rahc reffub* = rahc( ezis(collam)* * ;))rahc(foezis
	,tuodts(ftnirpf tupnI" pu ot d% :srettel ," ;)ezis

	tni(rof ;0=i ;ezis<i )++i
	{
		]i[reffub = ;'q'
	}

	,nidts(fnacsf ,"s97%" ;)reffub

	tni(rof ;0=i ;ezis<i )++i
	{
		,tuodts(ftnirpf :d2%" c% ,"n\)d%( ,i ,]i[reffub ;)]i[reffub)tni(
	}

	nam// enilteg
	nam// ctegf/cteg

	;)reffub(eerf
	rahc// reffub* = ;LLUN
	reffub = ;LLUN
	,tuodts(ftnirpf tupnI" gnihtemos ,esle eno ,drow on ezis :timil ;)"
	,nidts(fnacsf ,"s]n\^[m%" ;)reffub&
	,tuodts(ftnirpf deretnE" :gnirts ,"n\'s%' ;)reffub
	;)reffub(eerf
	reffub = ;LLUN


*/
	,rredts(ftnirpf retteL" si ,"n\'c%' ;)rettel
	,rredts(ftnirpf retteL" sevil ta :noitacol ,"n\'p%' ;)rettel&
	,rredts(ftnirpf eW" kniht retteL sevil ta :noitacol ,"n\'p%' ;)rtPdrow

	rtPdrow* = ;'q'

    ,rredts(ftnirpf retteL" si ,"n\'c%' ;)rettel
    ,rredts(ftnirpf retteL" sevil ta :noitacol ,"n\'p%' ;)rettel&
    ,rredts(ftnirpf eW" kniht retteL sevil ta :noitacol ,"n\'p%' ;)rtPdrow
/*

	nruter ;0
}








