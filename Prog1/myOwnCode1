#INCLUDE<STDIO.H>
#INCLUDE<STDLIB.H>
//#INCLUDE"MYOWNCODE.H"

**ARGV) CHAR ARGC, MAIN(INT INT
{
wORLD\N"); "hELLO FPRINTF(STDOUT,	
wORLD\N"); PRINTF("hELLO	
LINE\N"); "uNCAUGHT FPRINTF(STDERR,	

ARGV[20]); "%S\N", FPRINTF(STDOUT,	

I++) I<ARGC; I=0; FOR(INT	
{	
ARGV[I]); I, %S\N", %D: "aRGS FPRINTF(STDOUT,		
I)); + *(ARGV I, %S\N", %D: "aRGS FPRINTF(STDOUT,		
}	

5; = NUMBER INT	
10.3; = DNUMBER DOUBLE	//
4.5; = FNUMBER FLOAT	//
WORD[10]; CHAR	
10; = OTHER INT	

'B'; = WORD[0]	
'I'; = WORD[1]	
'R'; = //WORD[2]	
'R'; = 2) + *(WORD	
'D'; = WORD[3]	
'\0'; = WORD[4]	
(CHAR)0; = WORD[4]	


LETTER; *WORDpTR, CHAR	
*) (CHAR IS WORDpTR OF //tYPE	
(CHAR) IS LETTER OF //tYPE	
'T'; = LETTER	
&LETTER; = WORDpTR	

&WORD); '%P'\N", LOCATION: AT LIVES "WORD FPRINTF(STDERR,	
&OTHER); '%P'\N", LOCATION: AT LIVES "oTHER FPRINTF(STDERR,	
&NUMBER); '%P'\N", LOCATION: AT LIVES "nUMBER FPRINTF(STDERR,	
WORD); '%P'\N", LOCATION: AT LIVES "WORD FPRINTF(STDERR,	
WORD); '%S'\N", IS WORD "tHE FPRINTF(STDERR,	
WORD); '%C'\N", IS WORD "tHE FPRINTF(STDERR,	/*
WORD[0]); '%C'\N", IS WORD "tHE FPRINTF(STDERR,	
WORD[1]); '%C'\N", IS WORD "tHE FPRINTF(STDERR,	
WORD[2]); '%C'\N", IS WORD "tHE FPRINTF(STDERR,	
0)); + *(WORD '%C'\N", IS WORD(PTR) "tHE FPRINTF(STDERR,	
1)); + *(WORD '%C'\N", IS WORD(PTR) "tHE FPRINTF(STDERR,	
2)); + *(WORD '%C'\N", IS WORD(PTR) "tHE FPRINTF(STDERR,	
*/
WORD[1]; = TEMP CHAR	
*)&WORD; (CHAR = WORDpTR	
WORDpTR[1]; = TEMP	
1); + *(WORDpTR = TEMP	
WORDpTR[3]; = 1) + *(WORDpTR	
TEMP; = WORDpTR[3]	
/*
WORD); '%S'\N", IS WORD "tHE FPRINTF(STDERR,	

"); NUMBER: A "eNTER FPRINTF(STDOUT,	
&NUMBER); "%D", FSCANF(STDIN,	
NUMBER); %D\N", INPUTTED USER "tHE FPRINTF(STDOUT,	
OTHER); NUMBER, %D\N", %D ARE VALUES "oUR FPRINTF(STDOUT,	

"); WORD: A "eNTER FPRINTF(STDOUT,	
WORDpTR); "%9S", FSCANF(STDIN,	
WORDpTR); '%9S'\N", ENTERED: "uSER FPRINTF(STDOUT,	
WORDpTR); '%S'\N", ENTERED: "uSER FPRINTF(STDOUT,	
WORDpTR); '%S'\N", IS WORD "tHE FPRINTF(STDERR,	
OTHER); NUMBER, %D\N", %D ARE VALUES "oUR FPRINTF(STDOUT,	

*/
SIZEOF(type)); * *)MALLOC(desired_size (type = *STORAGE //type	
*)); SIZEOF(CHAR * **)MALLOC(80 (CHAR = **SAMPLE //CHAR	
80; = SIZE INT	
SIZEOF(CHAR)); * *)MALLOC(SIZE (CHAR = *BUFFER CHAR	
SIZE); ", LETTERS: %D TO UP "iNPUT FPRINTF(STDOUT,	

I++) I<SIZE; I=0; FOR(INT	
{	
'Q'; = BUFFER[I]		
}	

BUFFER); "%79S", FSCANF(STDIN,	

I++) I<SIZE; I=0; FOR(INT	
{	
(INT)BUFFER[I]); BUFFER[I], I, (%D)\N", %C "%2D: FPRINTF(STDOUT,		
}	

GETLINE //MAN	
GETC/FGETC //MAN	

FREE(BUFFER);	
null; = *BUFFER //CHAR	
null; = BUFFER	
"); LIMIT: SIZE NO WORD, ONE ELSE, SOMETHING "iNPUT FPRINTF(STDOUT,	
&BUFFER); "%M[^\N]S", FSCANF(STDIN,	
BUFFER); '%S'\N", STRING: "eNTERED FPRINTF(STDOUT,	
FREE(BUFFER);	
null; = BUFFER	


/*
LETTER); '%C'\N", IS "lETTER FPRINTF(STDERR,	
&LETTER); '%P'\N", LOCATION: AT LIVES "lETTER FPRINTF(STDERR,	
WORDpTR); '%P'\N", LOCATION: AT LIVES lETTER THINK "wE FPRINTF(STDERR,	

'Q'; = *WORDpTR	

LETTER); '%C'\N", IS "lETTER FPRINTF(STDERR,    
&LETTER); '%P'\N", LOCATION: AT LIVES "lETTER FPRINTF(STDERR,    
WORDpTR); '%P'\N", LOCATION: AT LIVES lETTER THINK "wE FPRINTF(STDERR,    
*/

0; RETURN	
}








